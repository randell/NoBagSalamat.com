<?php
/**
 * @file champion.module
 * author: Randell Benavidez (randell@randell.ph)
 * date-created: 20080914
 * date-updated: year-mm-dd "name" "description"
 */

/**
required hooks for new node-type:
	* hook_node_info()
	* hook_perm()
	* hook_access()
	* hook_form()
	* hook_insert()
	* hook_update()
	* hook_delete()
	* hook_validate()
	* hook_nodeapi()
	* hook_view()
	* hook_load()
*/

/**
 * Implementation of hook_node_info().
 */
function champion_node_info() {
	return array(
		'champion' => array(
			'name' => t('Champion'),
			'module' => 'champion',
			'description' => t("Create a new champion using this champion content-type"),
			'has_title' => TRUE, 
      		'title_label' => t('Full name'),
			'has_body' => FALSE,
      		'locked' => TRUE,
		)
	);
}

/**
 * Implementation of hook_perm().
 */
function champion_perm() {
	return array(
		'create champion',
		'delete champion',
		'edit champion',
	);
}

/**
 * Implementation of hook_access().
 */
function champion_access($op, $node, $account) {
	if ($op == 'create') {
		return user_access('create champion', $account);
	}

	if ($op == 'update') {
		return user_access('edit champion', $account);
	}

	if ($op == 'delete') {
  		return user_access('delete champion', $account);
	}
}

/**
 * Implementation of hook_form().
 */
function champion_form(&$node) {
	/**
	 * The site admin can decide if this node type has a title and body, and how
	 * the fields should be labeled. We need to load these settings so we can
	 * build the node form correctly.
	 */
	$type = node_get_types('type', $node);

	if ($type->has_title) {
		$form['title'] = array(
			'#type' => 'textfield',
			'#title' => check_plain($type->title_label),
			'#required' => TRUE,
			'#default_value' => $node->title,
			'#weight' => -5
		);
	}

	if ($type->has_body) {
		/**
		 * In Drupal 6, we can use node_body_field() to get the body and filter
		 * elements. This replaces the old textarea + filter_form() method of
		 * setting this up. It will also ensure the teaser splitter gets set up properly.
		 */
		$form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
	}

	$form['location'] = array(
		'#type' => 'textfield',
		'#title' => t('Location'),
   		'#required' => FALSE,
		'#default_value' => $node->location,
    	'#maxlength' => 20,
	);

	$form['age'] = array(
		'#type' => 'textfield',
		'#title' => t('Age'),
    	'#required' => FALSE,
		'#default_value' => $node->age,
    	'#maxlength' => 3,
	);

	$form['profile'] = array(
		'#type' => 'textfield',
		'#title' => t('Profile'),
    	'#required' => FALSE,
		'#default_value' => $node->profile,
    	'#maxlength' => 30,
	);

  	$form['quote'] = array(
		'#type' => 'textfield',
		'#title' => t('Quote'),
    	'#required' => FALSE,
		'#default_value' => $node->quote,
    	'#maxlength' => 50,
	);

  	$form['champion_since'] = array(
		'#type' => 'textfield',
		'#title' => t('Champion since'),
    	'#required' => FALSE,
		'#default_value' => $node->champion_since,
    	'#maxlength' => 20,
	);

  	$form['featured'] = array(
		'#type' => 'checkbox',
		'#title' => t('Featured champion'),
    	'#required' => FALSE,
		'#default_value' => 0,
	);

	$form['#attributes'] = array(
		'enctype' => 'multipart/form-data',
	);

  	$form['photo'] = array(
		'#type' => 'file',
		'#title' => 'Photo',
		'#description' => 'Please upload a photo with a size of 128x128',
	);

	return $form;
}

/**
 * Implementation of hook_insert().
 */
function champion_insert($node) {
	db_query("
		INSERT INTO {champion}
			(vid, nid, location, age, profile, quote, champion_since, featured)
		VALUES
			(%d, %d, '%s', %d, '%s', '%s', '%s', '%s')",
		$node->vid,
		$node->nid,
		$node->location,
		$node->age,
		$node->profile,
		$node->quote,
		$node->champion_since,
    	$node->featured
	);
    
	$id = db_last_insert_id('champion', 'nid');

	// There can only be one featured champion
	if ($node->featured == 1) {
		db_query("UPDATE {champion}
			SET
				featured = 0
			WHERE nid != %d",
			$id
		);
	}

	champion_upload_photo($node, $id);
}

/**
 * Handles the upload of photo
 */
function champion_upload_photo($node, $id) {
	$validators = array(
		'file_validate_extensions' => array('jpg jpeg gif png'),
		'file_validate_image_resolution' => array('128x128'),
		'file_validate_size' => array((1*1024*1024), 0),
	);

	$extension = array(
		'image/gif' => 'gif',
		'image/jpeg'=> 'jpg',
		'image/png' => 'png'
	);

	$file_directory_path = file_directory_path();
	if ($file = file_save_upload('photo', $validators, $file_directory_path)) {
		if ($node->photo) {
			// delete the current photo
			unlink($node->photo);
		}
		$filepath = "{$file_directory_path}/champion-{$id}.{$extension[$file->filemime]}";
		rename($file->filepath, $filepath);
		db_query(
			"UPDATE {champion} SET photo = '%s' WHERE nid = %d",
			$filepath,
			$id
		);
	}
}

/**
 * Implementation of hook_update().
 */
function champion_update($node) {
	/* if this is a new node or we're adding a new revision. */
	if ($node->revision) {
		champion_insert($node);
	} else {
		db_query("
			UPDATE {champion}
			SET
				location = '%s',
				age = %d,
				profile = '%s',
				quote = '%s',
				champion_since = '%s',
				featured = %d
			WHERE vid = %d",
			$node->location,
			$node->age,
			$node->profile,
			$node->quote,
			$node->champion_since,
      		$node->featured,
			$node->vid
		);

		// There can only be one featured champion
		if ($node->featured == 1) {
			db_query("
				UPDATE {champion}
				SET
					featured = 0
				WHERE nid != %d",
				$node->nid
			);
    	}
    	
    	champion_upload_photo($node, $node->nid);
	}  
}
/**
 * Implementation of hook_delete().
 */
function champion_delete($node) {
	/* Notice that we're matching all revision, by using the node's nid. */
  $n_champ = db_fetch_object(db_query("SELECT featured, photo FROM {champion} WHERE nid = %d", $node->nid));

  if ($n_champ->featured == 1) {
    $result = db_fetch_array(db_query("SELECT COUNT(*) AS champion_count FROM {champion} WHERE nid != %d", $node->nid));
    db_query("UPDATE {champion}
		  SET
        featured = 1
		  WHERE nid = %d",
		  $result['champion_count']
	  );
  }

  if ($n_champ->photo) {
    unlink($n_champ->photo);
  }

	db_query('DELETE FROM {champion} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_validate().
 */
function champion_validate(&$node) {
	if ($node->age) {
		if (!is_numeric($node->age)) {
			form_set_error('age', t('Age must be a number.'));
		}
	} else {
		// Let an empty field mean "zero."
		$node->age = 0;
	}
	/*
	$result = db_fetch_object(db_query("SELECT title from {node} WHERE title = '%s' AND type = 'champion'", $node->title));
  	if ($result) {
    	form_set_error('title', t('Champion exists already.'));
  	}*/
}

/**
 * Implementation of hook_nodeapi().
 */
function champion_nodeapi(&$node, $op, $teaser, $page) {
	switch ($op) {
		case 'delete revision':		  
      $n_champ = db_fetch_object(db_query("SELECT photo FROM {champion} WHERE vid = %d", $node->vid));

      if ($n_champ->photo) {
        unlink($n_champ->photo);
      }
      
      /* Notice that we're matching a single revision based on the node's vid. */
		  db_query('DELETE FROM {champion} WHERE vid = %d', $node->vid);
		break;
	}
}

/**
 * Implementation of hook_view().
 */
function champion_view($node, $teaser = FALSE, $page = FALSE) {
	$node = node_prepare($node, $teaser);
	/*
	$node->champion['test'] = array(
		'#value' => theme('champion_node', $node),
		'#weight' => 1,
	);
	*/
	return $node;
}

/**
 * Implementation of hook_load().
 */
function champion_load($node) {
	$additions = champion_object($node);
  $additions->champions = champion_all();

	return $additions;
}

function champion_object($node) {
	$result = db_query("
	  SELECT 
      u.dst, 
      n.nid, n.title, 
      c.location, c.age, c.profile, c.quote, c.champion_since, c.featured, c.photo 
    FROM 
      nbs_champion c, 
      nbs_node n, 
      nbs_url_alias u 
    WHERE 
      c.nid = n.nid 
      AND u.src LIKE CONCAT('node/',n.nid) 
      AND c.nid = %d",
		$node->nid
	);
	return db_fetch_object($result);
}

/** END OF champion-TYPE HOOKS **/

/**
 * Implementation of hook_init().
 */
function champion_init() {
	drupal_add_css(drupal_get_path('module', 'champion') .'/champion.css');
}

/**
 * Implementation of hook_footer().
 */
function champion_footer($main = 0) {
	if ($main) {
		$output = '<div class="main"></div>';
	} else {
		$output = '<div class="sub"></div>';
	}
	return $output;
}

/**
 * Implementation of hook_menu().
 */
function champion_menu() {
	$items['admin/settings/champions'] = array(
		'title' => 'Champion',
		'description' => t('Champion settings'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('champion_settings'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);
  $items['champions'] = array(
		'title' => 'Champions',
		'page callback' => 'champion_list',
		'page arguments' => NULL,
    	'access callback' =>  TRUE,
		'type' => MENU_NORMAL_ITEM,
		'weight' => 1,
	);

  return $items;
}

/**
 * Implementation of hook_settings().
 */
function champion_settings() {
	$form["champion_how_to_be"] = array(
		'#type' => 'textarea',
		'#title' => 'How to be a champion',
		'#default_value' => variable_get("champion_how_to_be", ''),
	);
	return system_settings_form($form);
}

/**
 * Returns the list of all champions
 */
function champion_list() {
	$featured_champion = champion_featured();
	$champions = champion_all();

	$content = theme('champion_list_tpl', $champions, $featured_champion);
	return theme('champion_theme_tpl', $content);
}

function champion_all() {
	$all = "SELECT nid FROM {champion} WHERE featured = 0 ORDER BY nid DESC";
	$all_count = "SELECT COUNT(*) FROM {champion} WHERE featured = 0";

	$result = pager_query($all, 25, 0, $all_count);
	$champions = array();
	while ($row = db_fetch_object($result)) {
		$champion = champion_object($row);
		$champions[] = $champion;
	}

	return $champions;
}

function champion_featured() {
  return db_fetch_object(db_query("SELECT * FROM {champion} c LEFT JOIN {node} n ON c.nid = n.nid WHERE featured = 1"));
}

/**
 * Implementation of hook_theme().
 */
function champion_theme() {
	return array(
		'champion' => array(
			'template' => 'champion',
			'arguments' => array('node'),
		),
		'node' => array(
      'template' => 'node-champion',
			'arguments' => array('node' => NULL, 'teaser' => FALSE, 'page' => FALSE),
		),
    'champion_list_tpl' => array(
      'template' => 'champion-list',
      'arguments' => array('champions' => NULL, 'featured_champion' => NULL),
    ),
    'champion_theme_tpl' => array(
      'template' => 'champion-theme',
      'arguments' => array('content' => NULL),
    ),
	);
}

/**
 * Implementation of hook_user().
 */
function champion_user($op, &$edit, &$account, $category = NULL) {
	
}
/* do not close php ?> */
